// @generated by protobuf-ts 2.9.0 with parameter generate_dependencies,long_type_string,server_grpc1
// @generated from protobuf file "rpcs/v1/monitor.proto" (package "rpcs.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message rpcs.v1.CheckRequest
 */
export interface CheckRequest {}
/**
 * @generated from protobuf message rpcs.v1.CheckResponse
 */
export interface CheckResponse {}
// @generated message type with reflection information, may provide speed optimized methods
class CheckRequest$Type extends MessageType<CheckRequest> {
  constructor() {
    super("rpcs.v1.CheckRequest", []);
  }
  create(value?: PartialMessage<CheckRequest>): CheckRequest {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CheckRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CheckRequest
  ): CheckRequest {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CheckRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message rpcs.v1.CheckRequest
 */
export const CheckRequest = new CheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckResponse$Type extends MessageType<CheckResponse> {
  constructor() {
    super("rpcs.v1.CheckResponse", []);
  }
  create(value?: PartialMessage<CheckResponse>): CheckResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CheckResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CheckResponse
  ): CheckResponse {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CheckResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message rpcs.v1.CheckResponse
 */
export const CheckResponse = new CheckResponse$Type();
/**
 * @generated ServiceType for protobuf service rpcs.v1.MonitorService
 */
export const MonitorService = new ServiceType("rpcs.v1.MonitorService", [
  { name: "Check", options: {}, I: CheckRequest, O: CheckResponse },
]);
