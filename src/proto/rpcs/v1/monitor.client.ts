// @generated by protobuf-ts 2.9.0 with parameter generate_dependencies,long_type_string,server_grpc1
// @generated from protobuf file "rpcs/v1/monitor.proto" (package "rpcs.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MonitorService } from "./monitor";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CheckResponse } from "./monitor";
import type { CheckRequest } from "./monitor";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service rpcs.v1.MonitorService
 */
export interface IMonitorServiceClient {
  /**
   * @generated from protobuf rpc: Check(rpcs.v1.CheckRequest) returns (rpcs.v1.CheckResponse);
   */
  check(
    input: CheckRequest,
    options?: RpcOptions
  ): UnaryCall<CheckRequest, CheckResponse>;
}
/**
 * @generated from protobuf service rpcs.v1.MonitorService
 */
export class MonitorServiceClient
  implements IMonitorServiceClient, ServiceInfo
{
  typeName = MonitorService.typeName;
  methods = MonitorService.methods;
  options = MonitorService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: Check(rpcs.v1.CheckRequest) returns (rpcs.v1.CheckResponse);
   */
  check(
    input: CheckRequest,
    options?: RpcOptions
  ): UnaryCall<CheckRequest, CheckResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CheckRequest, CheckResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
}
